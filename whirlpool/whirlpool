Here follows a way to stop using the whirlpool hash in an encrypted linux luks disk. It is necessary because
the new openssl program does not support whirlpool anymore. As a result, it would not be possible to boot a system
after a kernel update.
The procedure described here was used successfully on several computers, old, recent and new, all built by following
"sakaki" gentoo handbook. However, beware:
It is certainly not perfect and there may be better and more efficient ways to accomplish this. It uses a PC-helper for convenience.
1 - Download systemrescue from system-rescue.org and install it on a USB stick. Version 10.02 was used.
On the PC-to-fix, have an RJ-45 ethernet cable connected to your router and boot with the USB stick.
On the menu, pick the line ending with "nomodeset" to have an easy to read display (not a very small font).
Run: passwd root
ifconfig (write down the wired interface-name used and its IP address)
iptables -A INPUT -i <interface-name> -p tcp --dport 22 -j ACCEPT
iptables -L --Line-numbers # in the INPUT section, find the line <n> starting with LOGDROP
iptables -D INPUT <n>
2 - On the PC-helper, run:
ssh root@<IP address-from-ifconfig-above> # run this as user after deleting lines with that address in ~/.ssh/known_hosts
screen # convenient to switch the screen back and forth to PC-to-fix during long jobs so as not to tie up the PC-helper.
# type "CTRL-a d" on the PC-helper and type "screen -D -R" on the PC-to-fix. Do the opposite to move the screen back.
export PS1="(1) $PS1"
lsblk # identify the luks-disk-to-fix here-after labeled sdZn. You can also use the "blkid" command.
plug in your USB stick containing the luks-key.gpg file, here-after labeled sdYm (run lsblk to find it)
mkdir /mnt/bootusb; mount /dev/sdYm /mnt/bootusb; cd /mnt/bootusb
gpg --decrypt --output luks-key luks-key.gpg # enter your passphrase.
cryptsetup luksDump /dev/sdZn # should show two used slots. If not read on anyway.
cryptsetup open --key-file luks-key /dev/sdZn gentoo # if it fails, your luks-key file is wrong: go to the next section.
lsblk # verify that the luks disk has been opened and that you see vg1-root, vg1-home and vg1-swap. It could be vg2 or similar.
vgchange -a n vg? # replace vg? with the prefix from the previous command.
cryptsetup close gentoo
If the above luksDump command showed just one used slot (0), add one fallback passphrase on slot 1 as a safe step:
cryptsetup luksAddKey --key-file luks-key --new-key-slot 1 --hash sha512 /dev/sdZN # enter a fallback passphrase.
3 - If your luks-key file is not the right one, you will be able to use a new one as long as your fallback passphrase works. More later
cryptsetup open /dev/sdZn gentoo # enter your fallback passphrase. If it does not work, you won't be able to continue. Stop.
lsblk; vgchange -a n vg?; cryptsetup close gentoo
mv luks-key.gpg luks-key.gpg.wrong; mv luks-key luks-key.wrong
dd if=/dev/urandom of=luks-key bs=8388607 count=1
gpg --symmetric --cipher-algo AES256 --output luks-key.gpg luks-key
4 - Backup your luks disk. Plug in an USB drive (disk with additional USB interface), here-after labeled /dev/sdXk, large enough.
mkdir /mnt/backup; mount /dev/sdXk /mnt/backup; cd /mnt/backup
dd if=/dev/sdZn bs=1M | gzip -c | dd of=backup.dd.gz status=progress # Takes a while. You can move your screen to the PC-to-fix.
If you want to verify your backup, run: diff /dev/sdZn <(gunzip -c backup.dd.gz) # you can also use "cmp" with same arguments.
If you ever have to recover your luks disk from the backup, run: dd if=backup.dd.gz | gunzip -c | dd of=/dev/sdZn bs=1M
Now, backup your luks header: cd /mnt/bootusb; cryptsetup luksHeaderBackup --header-backup-file luks-header.img /dev/sdZn
5 - Convert to luks2 if you are on luks1. This is recommended as luks2 is the current luks default version.
cryptsetup luksDump /dev/sdZn # look at the first line Version: it is either 1 or 2, meaning luks1 or luks2
if it is luks1, run: cryptsetup convert --type luks2 /dev/sdZn # type YES unless there is a message warning of data corruption. In that is the case, keep luks1.
6 - Replace whirlpool hash with sha512. This will take a while. You can move your screen to the PC-to-fix and take it back later.
If you were able to open the luks disk with the luks-key file:
cryptsetup reencrypt --key-file luks-key --cipher serpent-xts-plain64 key-size 512 --key-slot 0 --hash sha512 /dev/sdZn
If not, meaning you had to use the fallback passphrase. However, reencrypt uses key-slot 0 by default. Normally, your fallback key should be in slot 1 but you may have to try other slot values until the command runs:
cryptsetup reencrypt --key-slot 1 --cipher serpent-xts-plain64 --hash sha512 /dev/sdZn # enter the fallback passphrase.
This will take a while.
7 - Fix the keys.
cryptsetup luksDump /dev/sdZn
The previous used slots 0 and 1 are now empty but there is a new slot 2 usable with the passphrase used in the previous step.
If you used the luks-key:
cryptsetup luksAddKey --key-file luks-key --new-key-slot 1 --hash sha512 /dev/sdZn # enter your fallback passphrase
If your old luks-key (now luks-key.wrong) did not work, use your fallback passphrase:
cryptsetup luksAddKey --new-key-slot 1 --hash sha512 /dev/sdZn # enter your fallback passphrase (twice).
Then in both cases:
cryptsetup luksAddKey --new-keyfile luks-key --new-key-slot 0 --hash sha512 /dev/sdZn # enter your fallback passphrase
Verify that it worked: cryptsetup luksDump /dev/sdZn # you should see three slots being used. Remove the third unnecessary slot.
If you used the luks-key: cryptsetup luksRemoveKey --key-file luks-key /dev/sdZn
If you used the fallback passphrase: cryptsetup luksRemoveKey /dev/sdZn # enter your fallback passphrase
You should now see used slots 0 and 1 with: cryptsetup luksDump /dev/sdZn
8 - Verify that it worked by using the "cryptsetup open ..." commands listed here above for both the luks-key passphrase and
the fallback passphrase. Then use the vgchange and "cryptsetup close ..." commands to close after each open command.
9 - Reboot
CTRL-D to exit screen
umount /mnt/*; rmdir /mnt/*
reboot
After booting gentoo successfuly, you can now run genup to update your system including with a new kernel.
Finally, delete the luks-key file with something like shred. You only need to keep luks-key.gpg
If everything appears to run fine, perform a luks header backup.
10 - For reference only: backup file backup.dd.gz verification
Plug an additional USB disk at least the same size as your luks disk sdZn. It is labeled as sdWx
While being in the /mnt/bootusb directory, run: dd if=backlup.dd.gz bs=1M | gunzip -c | dd of=/dev/sdWx status=progress
cryptsetup open /dev/sdZn gentoo # take note of the volume group, here-after labeled vg?
cryptsetup open /dev/sdWx gentest # it will open sdWx but not the volume group because it conflicts with vg?
vgimportclone -n vg?_clone /dev/mapper/gentest ; vgchange -a y vg?_clone # the logical volumes will open under vg?_clone volume group
mkdir /mnt/original ; mkdir /mnt/clone
to verify the root volumes, run: mount /dev/mapper/vg?-root /mnt/original ; mount /dev/mapper/vg?_clone-root /mnt/clone
rsync -axHAX --dry-run /mnt/original/ /mnt/clone/ # no difference should be flagged if your backup is correct.
Run the same commands to verify the home volumes. Close the vg's and the luks mappings as before.
